#!/usr/bin/env bash

# this is a simple config for herbstluftwm

hc() {
    herbstclient "$@"
}

hc emit_hook reload

# remove all existing keybindings
hc keyunbind --all

# keybindings
Mod=Mod4   # Use the super key as the main modifier

hc keybind $Mod-Shift-q quit
hc keybind $Mod-Shift-r reload
hc keybind $Mod-Shift-c close
hc keybind $Mod-Return spawn st
hc keybind $Mod-space spawn rofi -show 
hc keybind Mod1+Return spawn notify_info
hc keybind Mod1+Shift+4 spawn flameshot gui -p ~/tmp

# basic movement
# focusing clients
hc keybind $Mod-h     focus left
hc keybind $Mod-j     focus down
hc keybind $Mod-k     focus up
hc keybind $Mod-l     focus right

# moving clients
hc keybind $Mod-Shift-h     shift left
hc keybind $Mod-Shift-j     shift down
hc keybind $Mod-Shift-k     shift up
hc keybind $Mod-Shift-l     shift right

# splitting frames
# create an empty frame at the specified direction
hc keybind $Mod-u       split   bottom  0.5
hc keybind $Mod-o       split   right   0.5
# let the current frame explode into subframes
hc keybind $Mod-Control-space split explode

# resizing frames
resizestep=0.05
hc keybind $Mod-Control-h       resize left +$resizestep
hc keybind $Mod-Control-j       resize down +$resizestep
hc keybind $Mod-Control-k       resize up +$resizestep
hc keybind $Mod-Control-l       resize right +$resizestep

# tags
tag_names=( {1..4} )
tag_keys=( {1..4} 0 )

# In the use_index keybinding, check the presence of the my_monitor attribute,
# before focusing the desired tag.
hc rename default "${tag_names[0]}" || true
for i in ${!tag_names[@]} ; do
    hc add "${tag_names[$i]}"
    key="${tag_keys[$i]}"
    if ! [ -z "$key" ] ; then
        # first check if the tag is locked to some monitor.
        # if so, first focus the monitor
        hc keybind "$Mod-$key" \
            chain , silent substitute M tags."$i".my_monitor \
                        focus_monitor M \
                  , use_index "$i"
        hc keybind "$Mod-Shift-$key" move_index "$i"
    fi
done

# # Add a keybinding for locking the current tag to the monitor it is displayed
# # on. This is done by safing the current monitor index in the my_monitor
# # attribute of the focused tag. If the monitor has a (nonempty) name, use the
# # monitor name instead of its index.
# herbstclient keybind $Mod-t chain \
#     , new_attr string tags.focus.my_monitor \
#     , substitute M monitors.focus.index set_attr tags.focus.my_monitor M \
#     , try and \
#         . compare monitors.focus.name != "" \
#         . substitute M monitors.focus.name \
#                 set_attr tags.focus.my_monitor M

# # Add a keybinding for removing the lock
# herbstclient keybind $Mod-Shift-t \
#     remove_attr tags.focus.my_monitor

# Statically define which tag should be send to which monitor
lock_tag_to_monitor() {
    herbstclient chain \
        , new_attr string tags.by-name."$1".my_monitor \
        , set_attr tags.by-name."$1".my_monitor "$2"
}
# Already lock some of the tags to a monitor, for example:
# lock the second tag to the monitor with index 0
lock_tag_to_monitor 1 0
lock_tag_to_monitor 2 0
lock_tag_to_monitor 3 0
lock_tag_to_monitor 4 1

# cycle through tags
hc keybind $Mod-period use_index +1 --skip-visible
hc keybind $Mod-comma  use_index -1 --skip-visible

# layouting
hc keybind $Mod-r remove
hc keybind $Mod-s floating toggle
hc keybind $Mod-f fullscreen toggle
hc keybind $Mod-p pseudotile toggle
# The following cycles through the available layouts within a frame, but skips
# layouts, if the layout change wouldn't affect the actual window positions.
# I.e. if there are two windows within a frame, the grid layout is skipped.
hc keybind Mod1-space                                                           \
            or , and . compare tags.focus.curframe_wcount = 2                   \
                     . cycle_layout +1 vertical horizontal max vertical grid    \
               , cycle_layout +1

# mouse
hc mouseunbind --all
hc mousebind $Mod-Button1 move
hc mousebind $Mod-Button2 zoom
hc mousebind $Mod-Button3 resize

# focus
hc keybind $Mod-BackSpace   cycle_monitor
hc keybind $Mod-Tab         cycle_all +1
hc keybind $Mod-Shift-Tab   cycle_all -1
hc keybind $Mod-c cycle
hc keybind $Mod-i jumpto urgent

# theme
hc attr theme.tiling.reset 1
hc attr theme.floating.reset 1

hc set frame_gap 12
hc set frame_padding 0
hc set window_gap 12

hc set snap_distance 24
hc set snap_gap 16

hc set frame_bg_transparent 1
hc set always_show_frame 0
hc set frame_border_width 0
hc set frame_border_inner_width 0
hc set frame_transparent_width 0

hc set smart_frame_surroundings 0
hc set smart_window_surroundings 0

hc set window_border_width 1
hc set window_border_inner_width 0
hc set window_border_active_color '#fdf6e3'
hc set window_border_normal_color '#505050'
hc set window_border_urgent_color '#d9dee9'

hc attr theme.floating.border_width 1
hc attr theme.floating.outer_width 0
hc attr theme.floating.outer_color '#8FBCBB'

# rules
hc unrule -F
#hc rule class=XTerm tag=3 # move all xterms to tag 3
hc rule focus=on # normally focus new clients
#hc rule focus=off # normally do not focus new clients
# give focus to most common terminals
#hc rule class~'(.*[Rr]xvt.*|.*[Tt]erm|Konsole)' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' pseudotile=on manage=on
hc rule windowtype='_NET_WM_WINDOW_TYPE_DIALOG' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)' manage=off

hc set tree_style '╾│ ├└╼─┐'

# unlock, just to be sure
hc unlock

# do multi monitor setup here, e.g.:
# hc set_monitors 1280x1024+0+0 1280x1024+1280+0
# or simply:
hc detect_monitors

if hc silent new_attr bool my_not_first_autostart ; then
  $HOME/bin/mount_work_share.sh
  xrandr --output DP-4 --mode 3440x1440 --rate 120.00 --output DP-0 --mode 2560x1440 --rate 59.95 --left-of DP-4
  xsetroot -solid "$(xrdb -query | grep '.*color0' | awk '{print $NF}')"
fi
